import javax.swing.*;
import java.awt.*;
import java.nio.file.FileStore;
import java.nio.file.FileSystems;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;

public class ExternalStorageCheckerGUI {
    private JFrame frame;
    private JTextArea textArea;
    private JLabel titleLabel;

    // Path to the device you want to check
    private final String devicePath = "C:\\Users\\VICTUS\\Desktop\\Project";

    public ExternalStorageCheckerGUI() {
        frame = new JFrame("External Storage Checker");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(400, 400);
        frame.setLayout(new BorderLayout());

        // Title Label
        titleLabel = new JLabel("External Storage Information");
        titleLabel.setHorizontalAlignment(SwingConstants.CENTER);
        frame.add(titleLabel, BorderLayout.NORTH);

        // Text Area
        textArea = new JTextArea();
        textArea.setEditable(false);
        textArea.setForeground(Color.YELLOW);
        textArea.setBackground(Color.BLACK);
        JScrollPane scrollPane = new JScrollPane(textArea);
        frame.add(scrollPane, BorderLayout.CENTER);
    }

    public void display() {
        frame.setVisible(true);
    }

    public void checkForStorageInformation() {
        StringBuilder result = new StringBuilder();
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

        String timestamp = dateFormat.format(new Date());
        result.append("Time: " + timestamp);

        // Get all available file stores
        Iterable<FileStore> fileStores = FileSystems.getDefault().getFileStores();
        for (FileStore store : fileStores) {
            try {
                String type = store.type();
                String name = store.toString();
                long totalSpace = store.getTotalSpace();
                long usableSpace = store.getUsableSpace();
                long usedSpace = totalSpace - usableSpace;

                // Append storage information to the result string
                result.append("\n\nDevice: ").append(name).append("\n");
                result.append("  Type: ").append(type).append("\n");
                result.append("  Total space: ").append(totalSpace / (1024.0 * 1024.0 * 1024.0))
                        .append(" GB\n");
                result.append("  Used space: ").append(usedSpace / (1024.0 * 1024.0 * 1024.0))
                        .append(" GB\n");
                result.append("  Free: ").append(usableSpace / (1024.0 * 1024.0 * 1024.0))
                        .append(" GB\n");
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        // Get all directories and their files within the specified device path
        result.append("\n\nDirectories and Files:\n");
        try {
            Files.walk(Paths.get(devicePath))
                    .filter(Files::isRegularFile)
                    .forEach(file -> {
                        Path parentDir = file.getParent();
                        result.append(file.getFileName()).append(" - ").append(parentDir).append("\n");
                    });
        } catch (IOException e) {
            e.printStackTrace();
        }

        textArea.setText(result.toString());
    }

    public static void main(String[] args) {
        ExternalStorageCheckerGUI gui = new ExternalStorageCheckerGUI();
        gui.display();
        while (true) {
            gui.checkForStorageInformation();
            try {
                Thread.sleep(500); // Check every 5 seconds
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }
}
