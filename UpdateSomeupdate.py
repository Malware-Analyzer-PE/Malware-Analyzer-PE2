import sys
import hashlib
import capstone
import matplotlib.pyplot as plt  # Import Matplotlib
from PySide6 import QtWidgets
from PySide6.QtUiTools import QUiLoader

ldr = QUiLoader()

app = QtWidgets.QApplication(sys.argv)

main_window = ldr.load("widget.ui", None)
output_window = ldr.load("output.ui", None)

def calc_file_hash(file_path, hash_alg="md5", chunk_size=8192):
    hash_obj = hashlib.new(hash_alg)
    with open(file_path, "rb") as f:
        while chunk := f.read(chunk_size):
            hash_obj.update(chunk)
    return hash_obj.hexdigest()

def is_file_infected(file_path, signature_list):
    file_hash = calc_file_hash(file_path)
    return file_hash in signature_list

def disassemble_code(file_path):
    code_data = open(file_path, "rb").read()
    md = capstone.Cs(capstone.CS_ARCH_X86, capstone.CS_MODE_32)

    disassembled_code = []
    for i in md.disasm(code_data, 0):
        disassembled_code.append("0x{:x}:n{} {}".format(i.address, i.mnemonic, i.op_str))
    output_window.output_code.setText('\n'.join(disassembled_code))


def analyze_funcs(file_path):
    # Placeholder function for analyzing imported functions
    pass


def gen_report(file_path):
    disassemble_code(file_path)
    analyze_funcs(file_path)


def print_file_hash(file_path):
    file_hash = calc_file_hash(file_path, hash_alg="md5")
    output_window.output_hash.setText(file_hash)


def print_magic_number(file_path):
    # Placeholder function for printing magic number
    pass

# Function to plot the graph based on file status
def plot_graph(file_status):
    plt.figure(figsize=(8, 6))
    plt.plot(file_status)
    plt.xlabel('File Index')
    plt.ylabel('File Status')
    plt.title('File Detection Status')
    plt.grid(True)
    plt.show()

def do_something():
    file_to_check = main_window.file_path.text()
    print_file_hash(file_to_check)
    print_magic_number(file_to_check)

    with open("list.txt") as f:
        malware_signatures = set(line.strip() for line in f)

    if is_file_infected(file_to_check, malware_signatures):
        output_window.output_result.setText("File is infected with known malware!")
        # If infected, set the file status to 1
        file_status = [0, 1]
    else:
        output_window.output_result.setText("File is clean!")
        # If clean, set the file status to 0
        file_status = [0, 0]

    gen_report(file_to_check)
    output_window.show()
    
    # Plot the graph based on file status
    plot_graph(file_status)

main_window.setWindowTitle("MalwareHawk")
output_window.setWindowTitle("MalwareHawk")

main_window.analyse_button.clicked.connect(do_something)
main_window.show()
app.exec()
